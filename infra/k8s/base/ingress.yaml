apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grayghost-ai-ingress
  namespace: grayghost-ai
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "20m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecRequestBodyLimit 20971520
      SecRequestBodyNoFilesLimit 20971520
      SecRule REQUEST_HEADERS:Content-Length "@gt 20971520" \
        "id:1001,\
        phase:1,\
        deny,\
        status:413,\
        msg:'Request body too large',\
        logdata:'Content-Length: %{MATCHED_VAR}'"
    # OAuth2 Proxy annotations
    nginx.ingress.kubernetes.io/auth-url: "https://auth.grayghost.ai/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://auth.grayghost.ai/oauth2/start?rd=$scheme://$host$request_uri"
    nginx.ingress.kubernetes.io/auth-response-headers: "X-Auth-Request-User,X-Auth-Request-Email,X-Auth-Request-Access-Token"
    # Rate limiting
    nginx.ingress.kubernetes.io/limit-rps: "10"
    nginx.ingress.kubernetes.io/limit-connections: "20"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";
      more_set_headers "Permissions-Policy: geolocation=(), microphone=(), camera=()";
spec:
  tls:
  - hosts:
    - n8n.grayghost.ai
    - api.grayghost.ai
    - webhooks.grayghost.ai
    secretName: grayghost-ai-tls
  rules:
  - host: n8n.grayghost.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: n8n
            port:
              number: 80
  - host: api.grayghost.ai
    http:
      paths:
      - path: /canva
        pathType: Prefix
        backend:
          service:
            name: canv-a-tor
            port:
              number: 80
      - path: /trends
        pathType: Prefix
        backend:
          service:
            name: trend-miner
            port:
              number: 80
  - host: webhooks.grayghost.ai
    http:
      paths:
      - path: /brandwatch
        pathType: Prefix
        backend:
          service:
            name: brandwatch-receiver
            port:
              number: 80
---
# OAuth2 Proxy Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oauth2-proxy
  namespace: grayghost-ai
spec:
  replicas: 2
  selector:
    matchLabels:
      app: oauth2-proxy
  template:
    metadata:
      labels:
        app: oauth2-proxy
    spec:
      containers:
      - name: oauth2-proxy
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.5.0
        args:
        - --provider=oidc
        - --oidc-issuer-url=https://login.microsoftonline.com/YOUR_TENANT_ID/v2.0
        - --email-domain=*
        - --upstream=http://n8n:80
        - --http-address=0.0.0.0:4180
        - --cookie-secure=true
        - --cookie-samesite=lax
        - --cookie-expire=1h
        - --session-store-type=redis
        - --redis-connection-url=redis://redis-cluster:6379
        - --reverse-proxy=true
        - --skip-provider-button=false
        - --whitelist-domain=.grayghost.ai
        - --authenticated-emails-file=/etc/oauth2-proxy/authenticated-emails
        env:
        - name: OAUTH2_PROXY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy-secrets
              key: client-id
        - name: OAUTH2_PROXY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy-secrets
              key: client-secret
        - name: OAUTH2_PROXY_COOKIE_SECRET
          valueFrom:
            secretKeyRef:
              name: oauth2-proxy-secrets
              key: cookie-secret
        ports:
        - containerPort: 4180
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        volumeMounts:
        - name: authenticated-emails
          mountPath: /etc/oauth2-proxy
          readOnly: true
        livenessProbe:
          httpGet:
            path: /ping
            port: 4180
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ping
            port: 4180
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: authenticated-emails
        configMap:
          name: oauth2-proxy-config
---
apiVersion: v1
kind: Service
metadata:
  name: oauth2-proxy
  namespace: grayghost-ai
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 4180
    protocol: TCP
    name: http
  selector:
    app: oauth2-proxy
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oauth2-proxy-config
  namespace: grayghost-ai
data:
  authenticated-emails: |
    # Add authorized email addresses here
    # One per line
    # admin@grayghost.ai
---
# Separate ingress for OAuth2 proxy
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oauth2-proxy-ingress
  namespace: grayghost-ai
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - auth.grayghost.ai
    secretName: oauth2-proxy-tls
  rules:
  - host: auth.grayghost.ai
    http:
      paths:
      - path: /oauth2
        pathType: Prefix
        backend:
          service:
            name: oauth2-proxy
            port:
              number: 80