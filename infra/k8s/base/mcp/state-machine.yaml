apiVersion: v1
kind: ConfigMap
metadata:
  name: state-machine-config
  namespace: mcp
data:
  states.yaml: |
    # State machine configuration for content lifecycle
    states:
      Idea:
        entry_agents:
          - trend-scout
          - content-strategist
        exit_criteria:
          - field: "brief_approved"
            value: true
          - field: "notion_status"
            value: "brief_complete"
        next_state: "Draft"
        timeout: 3600  # 1 hour
        
      Draft:
        entry_agents:
          - hook-crafter
          - narrative-storyboard
          - visual-composer
          - dub-caption
        exit_criteria:
          - field: "all_assets_urls"
            condition: "not_empty"
          - field: "asset_count"
            condition: ">=3"
        next_state: "Awaiting_Review"
        timeout: 7200  # 2 hours
        
      Awaiting_Review:
        entry_agents:
          - brand-sentinel
          - pii-guardian
        human_review:
          required: true
          channel: "content-review"
          escalation:
            privacy_class: "High"
            to: "legal-review"
        exit_criteria:
          - field: "slack_approval"
            value: "approved"
          - field: "brand_check"
            value: "passed"
          - field: "pii_check"
            value: "passed"
        next_state: "Approved"
        timeout: 14400  # 4 hours
        
      Approved:
        entry_agents:
          - window-optimizer
        exit_criteria:
          - field: "scheduled_time"
            condition: "not_null"
        next_state: "Scheduled"
        timeout: 1800  # 30 minutes
        
      Scheduled:
        entry_agents:
          - publishing-herald
        trigger:
          type: "time"
          field: "scheduled_time"
        exit_criteria:
          - field: "publish_status"
            value: "success"
          - field: "platform_responses"
            condition: "all_200"
        next_state: "Published"
        timeout: 3600  # 1 hour
        retry:
          max_attempts: 3
          backoff: "exponential"
          
      Published:
        entry_agents:
          - analytics-analyst
        trigger:
          type: "cron"
          schedule: "0 2 * * *"  # Daily at 2 AM
        exit_criteria:
          - field: "kpi_row_inserted"
            value: true
        next_state: "Analyzing"
        timeout: 3600  # 1 hour
        
      Analyzing:
        entry_agents:
          - anomaly-watcher
        monitoring:
          duration_days: 28
          metrics:
            - engagement_rate
            - error_rate
            - reach
        exit_criteria:
          - field: "days_since_publish"
            value: 28
        next_state: "Retired"
        
      Retired:
        final: true
        archival:
          retention_days: 90
          storage: "s3://grayghostai-archive/content/"
          
    transitions:
      - from: "*"
        to: "Failed"
        on_error: true
        agents:
          - incident-narrator
          
    error_handling:
      Failed:
        notification:
          channels:
            - pagerduty
            - slack-alerts
        retry_policy:
          manual_only: true
          
  redis-schema.yaml: |
    # Redis key patterns for state management
    keys:
      state:
        pattern: "mcp:state:{uuid}"
        ttl: 604800  # 7 days
        fields:
          - current_state
          - previous_state
          - entered_at
          - metadata
          
      transitions:
        pattern: "mcp:transitions:{uuid}"
        type: "list"
        ttl: 604800  # 7 days
        
      locks:
        pattern: "mcp:locks:{uuid}"
        ttl: 300  # 5 minutes
        
      metrics:
        pattern: "mcp:metrics:{state}:{date}"
        type: "hash"
        ttl: 2592000  # 30 days
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: state-controller
  namespace: mcp
  labels:
    app: state-controller
    component: orchestration
spec:
  replicas: 2
  selector:
    matchLabels:
      app: state-controller
  template:
    metadata:
      labels:
        app: state-controller
        component: orchestration
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: state-controller
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: controller
        image: ghcr.io/ggdc/state-controller:v1
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: REDIS_ADDRESS
          value: "redis-cluster.grayghostai:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
        - name: NOTION_API_KEY
          valueFrom:
            secretKeyRef:
              name: notion-credentials
              key: api_key
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: slack-credentials
              key: webhook_url
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1
            memory: 1Gi
        volumeMounts:
        - name: config
          mountPath: /etc/state-machine
          readOnly: true
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: state-machine-config
---
apiVersion: v1
kind: Service
metadata:
  name: state-controller
  namespace: mcp
  labels:
    app: state-controller
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  selector:
    app: state-controller
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: state-controller
  namespace: mcp
  labels:
    app: state-controller
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: state-controller-network-policy
  namespace: mcp
spec:
  podSelector:
    matchLabels:
      app: state-controller
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: mcp-gateway
    - podSelector:
        matchLabels:
          app: agent-runner
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: grayghostai
      podSelector:
        matchLabels:
          app: redis-cluster
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
  # External APIs
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 10.0.0.0/8
        - 172.16.0.0/12
        - 192.168.0.0/16
    ports:
    - protocol: TCP
      port: 443  # Notion API, Slack webhooks