version: '3.8'

# n8n Docker Compose Configuration for GrayGhostAI Platform
# This configuration provides a production-ready n8n setup with:
# - PostgreSQL for workflow persistence
# - Redis for queue management
# - Custom node support
# - Security hardening
# - Monitoring integration

services:
  # PostgreSQL Database for n8n
  postgres:
    image: postgres:15-alpine
    container_name: n8n-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-n8n}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - n8n-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis for Queue Management
  redis:
    image: redis:7-alpine
    container_name: n8n-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - n8n-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # n8n Application
  n8n:
    image: n8nio/n8n:${N8N_VERSION:-latest}
    container_name: n8n-app
    restart: unless-stopped
    environment:
      # Basic Configuration
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
      - WEBHOOK_URL=${WEBHOOK_URL:-https://n8n.grayghostai.com/}
      - N8N_PATH=${N8N_PATH:-/}
      
      # Database Configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      
      # Redis Configuration for Queue Mode
      - EXECUTIONS_MODE=${EXECUTIONS_MODE:-queue}
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD:?REDIS_PASSWORD is required}
      - QUEUE_BULL_REDIS_DB=0
      - QUEUE_HEALTH_CHECK_ACTIVE=true
      
      # Execution Configuration
      - EXECUTIONS_TIMEOUT=3600
      - EXECUTIONS_TIMEOUT_MAX=7200
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_SAVE_ON_PROGRESS=true
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true
      
      # Security Configuration
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:?N8N_BASIC_AUTH_USER is required}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:?N8N_BASIC_AUTH_PASSWORD is required}
      - N8N_JWT_AUTH_ACTIVE=true
      - N8N_JWT_AUTH_HEADER=Authorization
      - N8N_JWT_AUTH_HEADER_VALUE_PREFIX=Bearer
      - N8N_USER_MANAGEMENT_JWT_SECRET=${JWT_SECRET:?JWT_SECRET is required}
      
      # Encryption
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:?N8N_ENCRYPTION_KEY is required}
      
      # Custom Nodes
      - N8N_CUSTOM_EXTENSIONS=/home/node/.n8n/custom
      - NODE_FUNCTION_ALLOW_BUILTIN=*
      - NODE_FUNCTION_ALLOW_EXTERNAL=*
      
      # Metrics and Monitoring
      - N8N_METRICS=true
      - N8N_METRICS_PREFIX=n8n_
      
      # Logging
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
      - N8N_LOG_OUTPUT=console
      
      # Editor UI Configuration
      - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL:-https://n8n.grayghostai.com/}
      - N8N_DISABLE_PRODUCTION_MAIN_PROCESS=false
      
      # Timezone
      - GENERIC_TIMEZONE=${TZ:-America/New_York}
      - TZ=${TZ:-America/New_York}
      
      # Community Nodes
      - N8N_COMMUNITY_EDITION_SETUP_ENABLED=true
      
      # Version Notifications
      - N8N_VERSION_NOTIFICATIONS_ENABLED=true
      - N8N_VERSION_NOTIFICATIONS_ENDPOINT=https://api.n8n.io/api/versions/
      - N8N_VERSION_NOTIFICATIONS_INFO_URL=https://docs.n8n.io/getting-started/installation/updating/
      
      # Diagnostics
      - N8N_DIAGNOSTICS_ENABLED=true
      - N8N_DIAGNOSTICS_CONFIG_FRONTEND=false
      - N8N_DIAGNOSTICS_CONFIG_BACKEND=false
      
      # Deployment Configuration
      - N8N_DEPLOYMENT_TYPE=docker-compose
      - N8N_INSTANCE_ID=${N8N_INSTANCE_ID:-}
      
    volumes:
      - n8n-data:/home/node/.n8n
      - ./custom-nodes:/home/node/.n8n/custom
      - ./backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "5678:5678"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - n8n-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 1G
    labels:
      - "com.grayghostai.service=n8n"
      - "com.grayghostai.environment=${ENVIRONMENT:-production}"

  # n8n Worker (for Queue Mode)
  n8n-worker:
    image: n8nio/n8n:${N8N_VERSION:-latest}
    container_name: n8n-worker
    command: worker
    restart: unless-stopped
    environment:
      # Inherit most environment variables from n8n service
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD:?REDIS_PASSWORD is required}
      - QUEUE_BULL_REDIS_DB=0
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:?N8N_ENCRYPTION_KEY is required}
      - N8N_CUSTOM_EXTENSIONS=/home/node/.n8n/custom
      - NODE_FUNCTION_ALLOW_BUILTIN=*
      - NODE_FUNCTION_ALLOW_EXTERNAL=*
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
      - GENERIC_TIMEZONE=${TZ:-America/New_York}
      - TZ=${TZ:-America/New_York}
    volumes:
      - n8n-data:/home/node/.n8n
      - ./custom-nodes:/home/node/.n8n/custom
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network
    deploy:
      mode: replicated
      replicas: ${N8N_WORKER_REPLICAS:-2}
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "com.grayghostai.service=n8n-worker"
      - "com.grayghostai.environment=${ENVIRONMENT:-production}"

  # MCP Bridge Service
  mcp-bridge:
    build:
      context: ../../mcp-bridge
      dockerfile: Dockerfile
    image: grayghostai/mcp-bridge:${MCP_BRIDGE_VERSION:-latest}
    container_name: mcp-bridge
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGINS=http://n8n:5678,https://n8n.grayghostai.com
      - JWT_SECRET=${JWT_SECRET:?JWT_SECRET is required}
      - MCP_SERVERS_CONFIG=/config/mcp-servers.json
    volumes:
      - ./mcp-config:/config:ro
      - mcp-data:/data
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - n8n-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    labels:
      - "com.grayghostai.service=mcp-bridge"
      - "com.grayghostai.environment=${ENVIRONMENT:-production}"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: n8n-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - n8n
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - n8n-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    labels:
      - "com.grayghostai.service=nginx"
      - "com.grayghostai.environment=${ENVIRONMENT:-production}"

networks:
  n8n-network:
    name: n8n-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres-data:
    name: n8n-postgres-data
  redis-data:
    name: n8n-redis-data
  n8n-data:
    name: n8n-app-data
  mcp-data:
    name: mcp-bridge-data
  nginx-cache:
    name: n8n-nginx-cache