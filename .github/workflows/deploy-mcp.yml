name: Deploy MCP Components

on:
  push:
    branches:
      - dev
      - staging
      - main
    paths:
      - 'infra/k8s/base/mcp/**'
      - 'agents/**'
      - '.github/workflows/deploy-mcp.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      component:
        description: 'Component to deploy (all, gateway, runners, agents)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - gateway
          - runners
          - agents
          - state-machine
          - vector-store

permissions:
  contents: read
  id-token: write
  packages: write

env:
  REGISTRY: ghcr.io
  COSIGN_EXPERIMENTAL: 1

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      cluster: ${{ steps.set-env.outputs.cluster }}
    steps:
      - id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          
          case "${{ steps.set-env.outputs.environment }}" in
            prod)
              echo "cluster=prod-eks-cluster" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "cluster=staging-eks-cluster" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "cluster=dev-eks-cluster" >> $GITHUB_OUTPUT
              ;;
          esac

  build-images:
    needs: determine-environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component:
          - name: mcp-gateway
            context: ./mcp/gateway
            dockerfile: Dockerfile
          - name: agent-registry
            context: ./mcp/registry
            dockerfile: Dockerfile
          - name: agent-runner
            context: ./mcp/runner
            dockerfile: Dockerfile
          - name: state-controller
            context: ./mcp/state-controller
            dockerfile: Dockerfile
          - name: n8n-mcp-bridge
            context: ./mcp/bridge
            dockerfile: Dockerfile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component.context }}
          file: ${{ matrix.component.context }}/${{ matrix.component.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/ggdc/${{ matrix.component.name }}:${{ github.sha }}
            ${{ env.REGISTRY }}/ggdc/${{ matrix.component.name }}:v1
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}

      - name: Sign image with Cosign
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/ggdc/${{ matrix.component.name }}@${{ steps.build.outputs.digest }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/ggdc/${{ matrix.component.name }}@${{ steps.build.outputs.digest }}
          format: cyclonedx-json
          output-file: sbom-${{ matrix.component.name }}.json

      - name: Attach SBOM to image
        run: |
          cosign attach sbom --sbom sbom-${{ matrix.component.name }}.json \
            ${{ env.REGISTRY }}/ggdc/${{ matrix.component.name }}@${{ steps.build.outputs.digest }}

  build-agents:
    needs: determine-environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        agent:
          - trend-scout
          - audience-cluster
          - content-strategist
          - hook-crafter
          - narrative-storyboard
          - visual-composer
          - dub-caption
          - brand-sentinel
          - pii-guardian
          - publishing-herald
          - window-optimizer
          - boost-governor
          - anomaly-watcher
          - incident-narrator
          - analytics-analyst
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Build and push agent image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./agents/${{ matrix.agent }}
          file: ./agents/${{ matrix.agent }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/ggdc/agents/${{ matrix.agent }}:${{ github.sha }}
            ${{ env.REGISTRY }}/ggdc/agents/${{ matrix.agent }}:v1
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            AGENT_NAME=${{ matrix.agent }}

      - name: Sign agent image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/ggdc/agents/${{ matrix.agent }}@${{ steps.build.outputs.digest }}

  deploy:
    needs: [determine-environment, build-images, build-agents]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ needs.determine-environment.outputs.cluster }} --region ${{ vars.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.13.2'

      - name: Deploy MCP namespace
        run: |
          kubectl apply -f infra/k8s/base/mcp/namespace.yaml

      - name: Create image pull secret
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=mcp \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy MCP components
        run: |
          component="${{ github.event.inputs.component || 'all' }}"
          
          if [[ "$component" == "all" || "$component" == "gateway" ]]; then
            kubectl apply -f infra/k8s/base/mcp/mcp-gateway.yaml
          fi
          
          if [[ "$component" == "all" || "$component" == "runners" ]]; then
            kubectl apply -f infra/k8s/base/mcp/agent-runner.yaml
          fi
          
          if [[ "$component" == "all" || "$component" == "agents" ]]; then
            kubectl apply -f infra/k8s/base/mcp/agent-registry.yaml
          fi
          
          if [[ "$component" == "all" || "$component" == "state-machine" ]]; then
            kubectl apply -f infra/k8s/base/mcp/state-machine.yaml
          fi
          
          if [[ "$component" == "all" || "$component" == "vector-store" ]]; then
            kubectl apply -f infra/k8s/base/mcp/vector-store.yaml
          fi
          
          # Apply security policies
          kubectl apply -f infra/k8s/base/mcp/security-policies.yaml
          
          # Apply n8n integration
          kubectl apply -f infra/k8s/base/mcp/n8n-integration.yaml

      - name: Wait for deployments
        run: |
          kubectl wait --for=condition=available --timeout=600s \
            deployment/mcp-gateway deployment/agent-registry deployment/agent-runner-cpu \
            deployment/state-controller -n mcp || true

      - name: Verify deployment
        run: |
          echo "=== MCP Namespace Status ==="
          kubectl get all -n mcp
          
          echo -e "\n=== Pod Status ==="
          kubectl get pods -n mcp -o wide
          
          echo -e "\n=== Service Endpoints ==="
          kubectl get endpoints -n mcp
          
          echo -e "\n=== HPA Status ==="
          kubectl get hpa -n mcp

      - name: Run smoke tests
        run: |
          # Test gateway health
          kubectl run test-gateway --rm -i --restart=Never --image=curlimages/curl:latest -n mcp -- \
            curl -s http://mcp-gateway:8080/healthz || echo "Gateway test failed"
          
          # Test agent registry
          kubectl run test-registry --rm -i --restart=Never --image=curlimages/curl:latest -n mcp -- \
            curl -s http://agent-registry:7000/healthz || echo "Registry test failed"

      - name: Update deployment status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ MCP deployment successful to ${{ needs.determine-environment.outputs.environment }}"
          else
            echo "❌ MCP deployment failed to ${{ needs.determine-environment.outputs.environment }}"
          fi